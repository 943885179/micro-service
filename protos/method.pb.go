// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/method.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MethodRequest struct {
	MarkdownStr          string   `protobuf:"bytes,1,opt,name=markdownStr,proto3" json:"markdownStr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MethodRequest) Reset()         { *m = MethodRequest{} }
func (m *MethodRequest) String() string { return proto.CompactTextString(m) }
func (*MethodRequest) ProtoMessage()    {}
func (*MethodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_method_e335b9cb4631dcc2, []int{0}
}
func (m *MethodRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MethodRequest.Unmarshal(m, b)
}
func (m *MethodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MethodRequest.Marshal(b, m, deterministic)
}
func (dst *MethodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MethodRequest.Merge(dst, src)
}
func (m *MethodRequest) XXX_Size() int {
	return xxx_messageInfo_MethodRequest.Size(m)
}
func (m *MethodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MethodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MethodRequest proto.InternalMessageInfo

func (m *MethodRequest) GetMarkdownStr() string {
	if m != nil {
		return m.MarkdownStr
	}
	return ""
}

type MethodReply struct {
	Html                 string   `protobuf:"bytes,1,opt,name=html,proto3" json:"html,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MethodReply) Reset()         { *m = MethodReply{} }
func (m *MethodReply) String() string { return proto.CompactTextString(m) }
func (*MethodReply) ProtoMessage()    {}
func (*MethodReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_method_e335b9cb4631dcc2, []int{1}
}
func (m *MethodReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MethodReply.Unmarshal(m, b)
}
func (m *MethodReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MethodReply.Marshal(b, m, deterministic)
}
func (dst *MethodReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MethodReply.Merge(dst, src)
}
func (m *MethodReply) XXX_Size() int {
	return xxx_messageInfo_MethodReply.Size(m)
}
func (m *MethodReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MethodReply.DiscardUnknown(m)
}

var xxx_messageInfo_MethodReply proto.InternalMessageInfo

func (m *MethodReply) GetHtml() string {
	if m != nil {
		return m.Html
	}
	return ""
}

func init() {
	proto.RegisterType((*MethodRequest)(nil), "protos.MethodRequest")
	proto.RegisterType((*MethodReply)(nil), "protos.MethodReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MarkdownClient is the client API for Markdown service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MarkdownClient interface {
	//
	Md2Html(ctx context.Context, in *MethodRequest, opts ...grpc.CallOption) (*MethodReply, error)
}

type markdownClient struct {
	cc *grpc.ClientConn
}

func NewMarkdownClient(cc *grpc.ClientConn) MarkdownClient {
	return &markdownClient{cc}
}

func (c *markdownClient) Md2Html(ctx context.Context, in *MethodRequest, opts ...grpc.CallOption) (*MethodReply, error) {
	out := new(MethodReply)
	err := c.cc.Invoke(ctx, "/protos.Markdown/Md2Html", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarkdownServer is the server API for Markdown service.
type MarkdownServer interface {
	//
	Md2Html(context.Context, *MethodRequest) (*MethodReply, error)
}

func RegisterMarkdownServer(s *grpc.Server, srv MarkdownServer) {
	s.RegisterService(&_Markdown_serviceDesc, srv)
}

func _Markdown_Md2Html_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkdownServer).Md2Html(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Markdown/Md2Html",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkdownServer).Md2Html(ctx, req.(*MethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Markdown_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Markdown",
	HandlerType: (*MarkdownServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Md2Html",
			Handler:    _Markdown_Md2Html_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/method.proto",
}

func init() { proto.RegisterFile("protos/method.proto", fileDescriptor_method_e335b9cb4631dcc2) }

var fileDescriptor_method_e335b9cb4631dcc2 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0xcf, 0x4d, 0x2d, 0xc9, 0xc8, 0x4f, 0xd1, 0x03, 0xf3, 0x84, 0xd8, 0x20, 0x82,
	0x4a, 0x86, 0x5c, 0xbc, 0xbe, 0x60, 0xf1, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x05,
	0x2e, 0xee, 0xdc, 0xc4, 0xa2, 0xec, 0x94, 0xfc, 0xf2, 0xbc, 0xe0, 0x92, 0x22, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0xce, 0x20, 0x64, 0x21, 0x25, 0x45, 0x2e, 0x6e, 0x98, 0x96, 0x82, 0x9c, 0x4a, 0x21,
	0x21, 0x2e, 0x96, 0x8c, 0x92, 0xdc, 0x1c, 0xa8, 0x4a, 0x30, 0xdb, 0xc8, 0x99, 0x8b, 0xc3, 0x17,
	0xaa, 0x43, 0xc8, 0x9c, 0x8b, 0xdd, 0x37, 0xc5, 0xc8, 0xa3, 0x24, 0x37, 0x47, 0x48, 0x14, 0x62,
	0x79, 0xb1, 0x1e, 0x8a, 0x95, 0x52, 0xc2, 0xe8, 0xc2, 0x05, 0x39, 0x95, 0x4a, 0x0c, 0x4e, 0x06,
	0x5c, 0xd2, 0x99, 0xf9, 0x7a, 0xe9, 0x45, 0x05, 0xc9, 0x7a, 0xa9, 0x15, 0x89, 0xb9, 0x05, 0x39,
	0xa9, 0xc5, 0x7a, 0x19, 0xa9, 0x39, 0x39, 0xf9, 0xe5, 0xf9, 0x45, 0x39, 0x29, 0x4e, 0xfc, 0x1e,
	0x20, 0x76, 0x38, 0x88, 0x1d, 0x00, 0xd2, 0x1e, 0xc0, 0x98, 0x04, 0xf1, 0x94, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0x1a, 0x5a, 0x53, 0xf1, 0xf2, 0x00, 0x00, 0x00,
}
